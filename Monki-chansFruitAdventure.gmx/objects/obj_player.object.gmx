<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>playerSpeed = 4;
playerFacing = 1;
playerJumpSpeed = 10;
playerGravity = 0.4; // 0.4 = 3,5 blocks
playerYVelocity = 0;
playerCanJump = true;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/////////////
///Physics///
/////////////
//check if velocity is too big
playerYVelocity += playerGravity;
if (playerYVelocity &gt; 16){
        playerYVelocity = 16;
}
//move player to new point
if(place_free(x,y+playerYVelocity)){
   
    y += playerYVelocity
}
//if place not free, move closer until hugging the wall
else if (place_free(x, y+sign(playerYVelocity))){
    do {
        
        y += sign(playerYVelocity);
    
    }
    until (!place_free(x,y+sign(playerYVelocity)))
     playerYVelocity = 0;
}
//if going against a wall, stop
else if (!place_free(x, y-playerYVelocity)){
    playerYVelocity = 0;
}
//on the groud -&gt; can jump
else {
    playerYVelocity = 0;
    playerCanJump = true;
}




/////////////////////
///Player Movement///
/////////////////////
if (keyboard_check(vk_right)&amp;&amp; place_free(x+playerSpeed,y)){
    playerFacing = 1;
    x += playerSpeed;   
}
if (keyboard_check(vk_left) &amp;&amp; place_free(x-playerSpeed,y)){
    playerFacing = 0;
    x -= playerSpeed;   
}
if (keyboard_check(vk_up) &amp;&amp; (place_free(x, y-playerJumpSpeed) &amp;&amp; playerCanJump)){
    playerCanJump = false;
    playerYVelocity = -playerJumpSpeed;
}

if (keyboard_check(vk_escape) ){
    game_end();
}

//&amp;&amp; place_free(x, y-playerJumpSpeed)
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
